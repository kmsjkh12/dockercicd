name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - run: touch .env
      - run: echo "${{ secrets.APPLICATION }}" > .env
      - run: cat .env

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582

      - name: Build with Gradle Wrapper
        run: |
          chmod +x gradlew
          ./gradlew build

      - name: web docker build and push
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

      - name: docker compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            # 컨테이너가 있을 때만 삭제
            if [ "$(sudo docker ps -aq)" ]; then
              sudo docker rm -f $(sudo docker ps -aq)
            else
              echo "No containers to remove."
            fi

            # 공식 postgres 이미지는 그대로 pull
            sudo docker pull postgres

            # 웹 서비스 이미지는 kmsjkh12/delivery (즉, ${{ secrets.DOCKER_REPO }})를 pull
            sudo docker pull ${{ secrets.DOCKER_REPO }}

            # docker-compose.yml 파일이 위치한 디렉토리로 이동 필요 시 추가 (예: cd /home/ubuntu/app)
            sudo docker-compose up -d

            sudo docker image prune -f

# test

